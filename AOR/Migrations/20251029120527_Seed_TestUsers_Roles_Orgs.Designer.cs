// <auto-generated />
using System;
using AOR.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AOR.Migrations
{
    [DbContext(typeof(AorDbContext))]
    [Migration("20251029120527_Seed_TestUsers_Roles_Orgs")]
    partial class Seed_TestUsers_Roles_Orgs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AOR.Models.ObstacleData", b =>
                {
                    b.Property<int>("ObstacleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ObstacleId"));

                    b.Property<string>("Category")
                        .HasColumnType("longtext");

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool?>("HasLighting")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MastType")
                        .HasColumnType("longtext");

                    b.Property<string>("Material")
                        .HasColumnType("longtext");

                    b.Property<string>("ObstacleDescription")
                        .HasMaxLength(1500)
                        .HasColumnType("varchar(1500)");

                    b.Property<double?>("ObstacleHeight")
                        .HasColumnType("double");

                    b.Property<string>("ObstacleName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ObstacleType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ObstacleTypeModelTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("PhotoModelPhotoId")
                        .HasColumnType("int");

                    b.Property<int>("PointCount")
                        .HasColumnType("int");

                    b.Property<int?>("PositionModelPositionId")
                        .HasColumnType("int");

                    b.Property<double?>("Voltage")
                        .HasColumnType("double");

                    b.Property<int?>("WireCount")
                        .HasColumnType("int");

                    b.HasKey("ObstacleId");

                    b.HasIndex("ObstacleTypeModelTypeId");

                    b.HasIndex("PhotoModelPhotoId");

                    b.HasIndex("PositionModelPositionId");

                    b.ToTable("Obstacles");
                });

            modelBuilder.Entity("AOR.Models.ObstacleTypeModel", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("TypeId");

                    b.HasIndex("TypeName")
                        .IsUnique();

                    b.ToTable("ObstacleTypes");
                });

            modelBuilder.Entity("AOR.Models.OrgModel", b =>
                {
                    b.Property<int>("OrgNr")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(9)
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrgNr"));

                    b.Property<string>("OrgName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("OrgNr");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            OrgNr = 123456789,
                            OrgName = "Norsk Luftambulanse"
                        },
                        new
                        {
                            OrgNr = 234567891,
                            OrgName = "Luftforsvaret"
                        },
                        new
                        {
                            OrgNr = 345678912,
                            OrgName = "Politiets helikoptertjeneste"
                        });
                });

            modelBuilder.Entity("AOR.Models.PhotoModel", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PhotoId"));

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("PhotoId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("AOR.Models.PositionModel", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PositionId"));

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(8,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.HasKey("PositionId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("AOR.Models.ReportModel", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ObstacleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReportId");

                    b.HasIndex("ObstacleId");

                    b.HasIndex("UserId", "ObstacleId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("AOR.Models.RoleModel", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Registerfører"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Crew"
                        });
                });

            modelBuilder.Entity("UserModel", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("OrgNr")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("OrgNr");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@uia.no",
                            FirstName = "Kari",
                            LastName = "Nordmann",
                            OrgNr = 1,
                            PasswordHash = "2bX1jws4GYKTlxhloUB09Z66PoJZW+y+hq5R8dnx9l4="
                        },
                        new
                        {
                            UserId = 2,
                            Email = "reg@uia.no",
                            FirstName = "Per",
                            LastName = "Register",
                            OrgNr = 2,
                            PasswordHash = "2bX1jws4GYKTlxhloUB09Z66PoJZW+y+hq5R8dnx9l4="
                        },
                        new
                        {
                            UserId = 3,
                            Email = "pilot@uia.no",
                            FirstName = "Ola",
                            LastName = "Pilot",
                            OrgNr = 3,
                            PasswordHash = "2bX1jws4GYKTlxhloUB09Z66PoJZW+y+hq5R8dnx9l4="
                        });
                });

            modelBuilder.Entity("UserRoleModel", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1,
                            Id = 0
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2,
                            Id = 0
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3,
                            Id = 0
                        });
                });

            modelBuilder.Entity("AOR.Models.ObstacleData", b =>
                {
                    b.HasOne("AOR.Models.ObstacleTypeModel", null)
                        .WithMany("Obstacles")
                        .HasForeignKey("ObstacleTypeModelTypeId");

                    b.HasOne("AOR.Models.PhotoModel", null)
                        .WithMany("Obstacles")
                        .HasForeignKey("PhotoModelPhotoId");

                    b.HasOne("AOR.Models.PositionModel", null)
                        .WithMany("Obstacles")
                        .HasForeignKey("PositionModelPositionId");
                });

            modelBuilder.Entity("AOR.Models.ReportModel", b =>
                {
                    b.HasOne("AOR.Models.ObstacleData", "Obstacle")
                        .WithMany()
                        .HasForeignKey("ObstacleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserModel", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Obstacle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserModel", b =>
                {
                    b.HasOne("AOR.Models.OrgModel", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrgNr");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("UserRoleModel", b =>
                {
                    b.HasOne("AOR.Models.RoleModel", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserModel", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AOR.Models.ObstacleTypeModel", b =>
                {
                    b.Navigation("Obstacles");
                });

            modelBuilder.Entity("AOR.Models.OrgModel", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AOR.Models.PhotoModel", b =>
                {
                    b.Navigation("Obstacles");
                });

            modelBuilder.Entity("AOR.Models.PositionModel", b =>
                {
                    b.Navigation("Obstacles");
                });

            modelBuilder.Entity("UserModel", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
