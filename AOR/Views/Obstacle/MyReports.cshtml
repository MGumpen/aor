@model IEnumerable<AOR.Models.ObstacleData>

@{
    ViewData["Title"] = "My Reports";
    Layout = "_Layout";
}

<style>
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 24px;
    }
    
    .header {
        margin-bottom: 32px;
        text-align: center;
    }
    
    .obstacles-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 20px;
    }
    
    .obstacle-card {
        background: white;
        border: 1px solid #e5e7eb;
        border-radius: 16px;
        padding: 20px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        transition: all 0.2s ease;
    }
    
    .obstacle-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 16px rgba(0,0,0,0.12);
    }
    
    .obstacle-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 16px;
    }
    
    .obstacle-name {
        font-size: 1.25rem;
        font-weight: 600;
        color: #1e293b;
        margin: 0;
    }
    
    .obstacle-type-badge {
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 11px;
        font-weight: 600;
        text-transform: uppercase;
    }
    
    .badge-powerline { background: #fee2e2; color: #dc2626; }
    .badge-mast { background: #dbeafe; color: #2563eb; }
    .badge-other { background: #d1fae5; color: #059669; }
    
    .obstacle-details {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 12px;
        margin-bottom: 16px;
    }
    
    .detail-item {
        font-size: 0.875rem;
    }
    
    .detail-label {
        color: #64748b;
        font-weight: 500;
    }
    
    .detail-value {
        color: #1e293b;
        font-weight: 400;
    }
    
    .obstacle-description {
        background: #f8fafc;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 16px;
        font-size: 0.875rem;
        color: #475569;
    }
    
    .obstacle-actions {
        display: flex;
        gap: 8px;
        justify-content: flex-end;
    }
    
    .btn-small {
        padding: 6px 12px;
        border-radius: 6px;
        text-decoration: none;
        font-size: 0.75rem;
        font-weight: 500;
        text-align: center;
        transition: all 0.2s ease;
    }
    
    .btn-details {
        background: #f1f5f9;
        color: #475569;
        border: 1px solid #e2e8f0;
    }
    
    .btn-details:hover {
        background: #e2e8f0;
        color: #334155;
    }
    
    .empty-state {
        text-align: center;
        padding: 60px 20px;
        color: #64748b;
    }
    
    .empty-icon {
        font-size: 4rem;
        margin-bottom: 16px;
    }
    
    .actions-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 24px;
        padding: 16px;
        background: white;
        border-radius: 12px;
        box-shadow: 0 1px 4px rgba(0,0,0,0.05);
    }
    
    .stats {
        display: flex;
        gap: 24px;
        font-size: 0.875rem;
        color: #64748b;
    }
    
    .btn {
        padding: 10px 20px;
        border-radius: 8px;
        text-decoration: none;
        font-weight: 500;
        transition: all 0.2s ease;
        display: inline-block;
    }
    
    .btn-primary {
        background: #4f46e5;
        color: white;
    }
    
    .btn-primary:hover {
        background: #4338ca;
        color: white;
    }
</style>

<section class="container">
    <div class="header">
        <h1>All Registered Obstacles</h1>
        <p style="color: #64748b;">Complete overview of all aviation obstacles in the system</p>
    </div>
    
    <div class="actions-bar">
        <div class="stats">
            <div><strong>Total:</strong> @Model.Count() obstacles</div>
            <div><strong>Power Lines:</strong> @Model.Count(x => x.ObstacleType.ToLower() == "powerline")</div>
            <div><strong>Masts:</strong> @Model.Count(x => x.ObstacleType.ToLower() == "mast")</div>
            <div><strong>Other:</strong> @Model.Count(x => x.ObstacleType.ToLower() == "other")</div>
        </div>
        <a href="/Crew" class="btn btn-primary">Add New Obstacle</a>
    </div>
    
    @if (Model.Any())
    {
        <div class="obstacles-grid">
            @foreach (var obstacle in Model.OrderByDescending(x => x.CreatedAt))
            {
                <div class="obstacle-card">
                    <div class="obstacle-header">
                        <h3 class="obstacle-name">@obstacle.ObstacleName</h3>
                        <span class="obstacle-type-badge badge-@obstacle.ObstacleType.ToLower()">
                            @obstacle.ObstacleType
                        </span>
                    </div>
                    
                    <div class="obstacle-details">
                        @if (obstacle.ObstacleHeight.HasValue)
                        {
                            <div class="detail-item">
                                <div class="detail-label">Height:</div>
                                <div class="detail-value">@obstacle.ObstacleHeight.Value m</div>
                            </div>
                        }
                        
                        <div class="detail-item">
                            <div class="detail-label">Points:</div>
                            <div class="detail-value">@obstacle.PointCount</div>
                        </div>
                        
                        <div class="detail-item">
                            <div class="detail-label">Registered:</div>
                            <div class="detail-value">@obstacle.CreatedAt.ToString("dd.MM.yyyy")</div>
                        </div>
                        
                        @if (obstacle.ObstacleType.ToLower() == "powerline" && obstacle.Voltage.HasValue)
                        {
                            <div class="detail-item">
                                <div class="detail-label">Voltage:</div>
                                <div class="detail-value">@obstacle.Voltage kV</div>
                            </div>
                        }
                        
                        @if (obstacle.ObstacleType.ToLower() == "mast" && !string.IsNullOrEmpty(obstacle.MastType))
                        {
                            <div class="detail-item">
                                <div class="detail-label">Type:</div>
                                <div class="detail-value">@obstacle.MastType</div>
                            </div>
                        }
                    </div>
                    
                    @if (!string.IsNullOrEmpty(obstacle.ObstacleDescription))
                    {
                        <div class="obstacle-description">
                            @(obstacle.ObstacleDescription.Length > 100 ? 
                              obstacle.ObstacleDescription.Substring(0, 100) + "..." : 
                              obstacle.ObstacleDescription)
                        </div>
                    }
                    
                    <div class="obstacle-actions">
                        <a href="/Obstacle/Details/@obstacle.ObstacleId" class="btn-small btn-details">View Details</a>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-state">
            <div class="empty-icon">üìç</div>
            <h3>No Obstacles Registered</h3>
            <p>No aviation obstacles have been registered yet.</p>
            <a href="/Crew" class="btn btn-primary">Register First Obstacle</a>
        </div>
    }
</section>
