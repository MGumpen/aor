@model AOR.Models.ObstacleData
@{
    ViewData["Title"] = "Register Obstacle";
    Layout = "_Layout";
    
    string obstacleType = ViewBag.ObstacleType ?? "other";
    string coordinatesJson = ViewBag.Coordinates ?? "[]";
    int pointCount = ViewBag.PointCount ?? 0;
}

<style>
    .pilot-form-container {
        max-width: 800px;
        margin: 0 auto;
        background: #ffffff;
        border-radius: 24px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.08);
        padding: 24px;
        border: 1px solid #e5e7eb;
    }
    .pilot-form-header h1 {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 6px;
    }
    .pilot-form-header p {
        color: #6b7280;
        margin: 0;
    }
    .form-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 18px;
    }
    .form-row {
        grid-column: span 1;
    }
    .form-row.wide {
        grid-column: span 2;
    }
    .pilot-label {
        display: block;
        font-size: 0.875rem;
        font-weight: 500;
        color: #374151;
        margin-bottom: 6px;
    }
    .pilot-input, .pilot-textarea, .pilot-select {
        width: 100%;
        padding: 10px 12px;
        border: 1px solid #d1d5db;
        border-radius: 8px;
        font-size: 14px;
        outline: none;
        box-sizing: border-box;
    }
    .pilot-input:focus, .pilot-textarea:focus, .pilot-select:focus {
        border-color: #4f46e5;
        box-shadow: 0 0 0 3px rgba(79,70,229,0.15);
    }
    .pilot-validation {
        color: #dc2626;
        font-size: 0.875rem;
        margin-top: 4px;
        display: block;
    }
    .pilot-help {
        display: block;
        font-size: 0.875rem;
        color: #6b7280;
        margin-top: 6px;
    }
    .obstacle-info {
        background-color: #f0f9ff;
        border: 1px solid #0ea5e9;
        border-radius: 12px;
        padding: 16px;
        margin-bottom: 20px;
    }
    .obstacle-info h3 {
        color: #0c4a6e;
        margin: 0 0 8px 0;
        font-size: 1.1rem;
    }
    .coordinates-list {
        background-color: #f8fafc;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        padding: 12px;
        font-family: monospace;
        font-size: 12px;
        max-height: 200px;
        overflow-y: auto;
    }
    .coordinate-item {
        margin-bottom: 4px;
        padding: 4px 8px;
        background-color: white;
        border-radius: 4px;
        border-left: 3px solid #3b82f6;
    }
    .pilot-actions {
        display: flex;
        gap: 10px;
        align-items: center;
        margin-top: 20px;
        justify-content: flex-start;
    }
    .pilot-primary {
        background-color: #4338ca;
        color: #fff;
        border: none;
        padding: 12px 20px;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 500;
    }
    .pilot-secondary {
        background: #f3f4f6;
        border: 1px solid #9ca3af;
        color: #374151;
        padding: 12px 20px;
        border-radius: 8px;
        cursor: pointer;
    }
    .obstacle-type-badge {
        display: inline-block;
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
        text-transform: uppercase;
        margin-left: 10px;
    }
    
    .badge-powerline { background: #fee2e2; color: #dc2626; }
    .badge-mast { background: #dbeafe; color: #2563eb; }
    .badge-other { background: #d1fae5; color: #059669; }

    /* Height conversion styles */
    .height-selector {
        display: flex;
        gap: 12px;
        align-items: center;
        margin-bottom: 12px;
    }
    .unit-tab {
        padding: 8px 16px;
        border: 2px solid #d1d5db;
        border-radius: 8px;
        background: #f9fafb;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.2s;
        font-size: 14px;
    }
    .unit-tab.active {
        border-color: #4f46e5;
        background: #4f46e5;
        color: white;
    }
    .height-input-group {
        display: flex;
        gap: 12px;
        align-items: center;
    }
    .height-input-wrapper {
        flex: 1;
        position: relative;
    }
    .height-input-wrapper input {
        padding-right: 45px;
    }
    .unit-label {
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #6b7280;
        font-size: 0.875rem;
        pointer-events: none;
        font-weight: 500;
    }
    .conversion-display {
        font-size: 0.875rem;
        color: #6b7280;
        padding: 8px 12px;
        background: #f9fafb;
        border-radius: 6px;
        min-width: 120px;
        text-align: center;
        font-weight: 500;
        border: 1px solid #e5e7eb;
    }
</style>

<section class="pilot-form-container">
    <div class="pilot-form-header">
        <h1>
            @(obstacleType.ToUpper()) Registration
            <span class="obstacle-type-badge badge-@obstacleType.ToLower()">@obstacleType</span>
        </h1>
        <p>Complete the registration for your @obstacleType.ToLower() obstacle with @pointCount point(s)</p>
    </div>

    <div class="obstacle-info">
        <h3>Map Data Summary</h3>
        <p><strong>Type:</strong> @obstacleType.ToUpper()</p>
        <p><strong>Points:</strong> @pointCount coordinate(s)</p>
        
        @if (pointCount > 0) {
            <div class="coordinates-list">
                <strong>Coordinates:</strong>
                <div id="coordinates-display"></div>
            </div>
        }
    </div>

    <form asp-controller="Obstacle" asp-action="DataForm" method="post">
        <!-- Hidden fields -->
        <input type="hidden" name="ObstacleType" value="@obstacleType" />
        <input type="hidden" name="Coordinates" value="@coordinatesJson" />
        <input type="hidden" name="PointCount" value="@pointCount" />
        <input type="hidden" name="heightUnit" id="heightUnit" value="meters" />

        <div class="form-grid">
            @if (obstacleType.ToLower() == "powerline") {
    <div class="form-row">
        <label class="pilot-label">Power Line Name/ID</label>
        <input asp-for="ObstacleName" class="pilot-input" placeholder="e.g., Main Power Line A" required />
        <span class="pilot-help">Enter the power line identification</span>
        <span asp-validation-for="ObstacleName" class="pilot-validation"></span>
    </div>
    
    <div class="form-row">
        <label class="pilot-label">Wire Height</label>
        
        <!-- Unit selector -->
        <div style="display: flex; gap: 10px; margin-bottom: 8px;">
            <button type="button" class="unit-btn" data-unit="meters" style="padding: 6px 12px; border: 2px solid #4f46e5; background: #4f46e5; color: white; border-radius: 6px; cursor: pointer;">Meters</button>
            <button type="button" class="unit-btn" data-unit="feet" style="padding: 6px 12px; border: 2px solid #d1d5db; background: #f9fafb; color: #374151; border-radius: 6px; cursor: pointer;">Feet</button>
        </div>
        
        <!-- Single height input -->
        <div style="display: flex; gap: 10px; align-items: center;">
            <div style="flex: 1; position: relative;">
                <input type="number" step="0.1" min="0.1" class="pilot-input" 
                       id="heightInput" name="heightInput" placeholder="e.g., 15.5" required />
                <span id="unitLabel" style="position: absolute; right: 12px; top: 50%; transform: translateY(-50%); color: #6b7280; font-size: 0.875rem;">m</span>
            </div>
            <div id="conversionDisplay" style="padding: 8px 12px; background: #f9fafb; border-radius: 6px; min-width: 100px; text-align: center; font-size: 0.875rem; color: #6b7280;">â‰ˆ 0.0 ft</div>
        </div>
        
        <input type="hidden" name="heightUnit" id="heightUnit" value="meters" />
        <input type="hidden" asp-for="ObstacleHeight" id="hiddenHeight" />
        
        <span class="pilot-help">Height of the lowest wire (required)</span>
        <span asp-validation-for="ObstacleHeight" class="pilot-validation"></span>
    </div>
    
    <div class="form-row">
        <label class="pilot-label">Number of Wires</label>
        <input name="WireCount" type="number" min="1" class="pilot-input" placeholder="e.g., 3" />
    </div>
}
else if (obstacleType.ToLower() == "mast") {
    <div class="form-row">
        <label class="pilot-label">Mast Name/ID</label>
        <input asp-for="ObstacleName" class="pilot-input" placeholder="e.g., Communication Tower 1" required />
        <span class="pilot-help">Enter the mast identification</span>
        <span asp-validation-for="ObstacleName" class="pilot-validation"></span>
    </div>
    
    <div class="form-row">
        <label class="pilot-label">Height</label>
        
        <!-- Unit selector -->
        <div style="display: flex; gap: 10px; margin-bottom: 8px;">
            <button type="button" class="unit-btn" data-unit="meters" style="padding: 6px 12px; border: 2px solid #4f46e5; background: #4f46e5; color: white; border-radius: 6px; cursor: pointer;">Meters</button>
            <button type="button" class="unit-btn" data-unit="feet" style="padding: 6px 12px; border: 2px solid #d1d5db; background: #f9fafb; color: #374151; border-radius: 6px; cursor: pointer;">Feet</button>
        </div>
        
        <!-- Single height input -->
        <div style="display: flex; gap: 10px; align-items: center;">
            <div style="flex: 1; position: relative;">
                <input type="number" step="0.1" min="0.1" class="pilot-input" 
                       id="heightInput" name="heightInput" placeholder="e.g., 45.0" required />
                <span id="unitLabel" style="position: absolute; right: 12px; top: 50%; transform: translateY(-50%); color: #6b7280; font-size: 0.875rem;">m</span>
            </div>
            <div id="conversionDisplay" style="padding: 8px 12px; background: #f9fafb; border-radius: 6px; min-width: 100px; text-align: center; font-size: 0.875rem; color: #6b7280;">â‰ˆ 0.0 ft</div>
        </div>
        
        <input type="hidden" name="heightUnit" id="heightUnit" value="meters" />
        <input type="hidden" asp-for="ObstacleHeight" id="hiddenHeight" />
        
        <span class="pilot-help">Total height of the mast (required)</span>
        <span asp-validation-for="ObstacleHeight" class="pilot-validation"></span>
    </div>
    
    <div class="form-row">
        <label class="pilot-label">Mast Type</label>
        <select name="MastType" class="pilot-select">
            <option value="">Select type</option>
            <option value="communication">Communication Tower</option>
            <option value="radio">Radio Mast</option>
            <option value="cellular">Cell Tower</option>
            <option value="meteorological">Weather Mast</option>
            <option value="other">Other</option>
        </select>
    </div>
    
    <div class="form-row">
        <label class="pilot-label">Has Lighting?</label>
        <select name="HasLighting" class="pilot-select">
            <option value="">Select</option>
            <option value="true">Yes - Has Aviation Lighting</option>
            <option value="false">No - No Lighting</option>
        </select>
    </div>
}
else {
    <div class="form-row">
        <label class="pilot-label">Obstacle Name</label>
        <input asp-for="ObstacleName" class="pilot-input" placeholder="e.g., Wind Turbine, Building, etc." required />
        <span class="pilot-help">Name or description of the obstacle</span>
        <span asp-validation-for="ObstacleName" class="pilot-validation"></span>
    </div>
    
    <div class="form-row">
        <label class="pilot-label">Height</label>
        
        <!-- Unit selector -->
        <div style="display: flex; gap: 10px; margin-bottom: 8px;">
            <button type="button" class="unit-btn" data-unit="meters" style="padding: 6px 12px; border: 2px solid #4f46e5; background: #4f46e5; color: white; border-radius: 6px; cursor: pointer;">Meters</button>
            <button type="button" class="unit-btn" data-unit="feet" style="padding: 6px 12px; border: 2px solid #d1d5db; background: #f9fafb; color: #374151; border-radius: 6px; cursor: pointer;">Feet</button>
        </div>
        
        <!-- Single height input -->
        <div style="display: flex; gap: 10px; align-items: center;">
            <div style="flex: 1; position: relative;">
                <input type="number" step="0.1" min="0.1" class="pilot-input" 
                       id="heightInput" name="heightInput" placeholder="e.g., 25.0" required />
                <span id="unitLabel" style="position: absolute; right: 12px; top: 50%; transform: translateY(-50%); color: #6b7280; font-size: 0.875rem;">m</span>
            </div>
            <div id="conversionDisplay" style="padding: 8px 12px; background: #f9fafb; border-radius: 6px; min-width: 100px; text-align: center; font-size: 0.875rem; color: #6b7280;">â‰ˆ 0.0 ft</div>
        </div>
        
        <input type="hidden" name="heightUnit" id="heightUnit" value="meters" />
        <input type="hidden" asp-for="ObstacleHeight" id="hiddenHeight" />
        
        <span class="pilot-help">Height is required for Other obstacles</span>
        <span asp-validation-for="ObstacleHeight" class="pilot-validation"></span>
    </div>
    
    <div class="form-row">
        <label class="pilot-label">Obstacle Category</label>
        <select name="Category" class="pilot-select">
            <option value="">Select category</option>
            <option value="building">Building/Structure</option>
            <option value="tree">Tree/Vegetation</option>
            <option value="terrain">Terrain/Hill</option>
            <option value="vehicle">Vehicle/Equipment</option>
            <option value="temporary">Temporary Structure</option>
            <option value="other">Other</option>
        </select>
    </div>
}

            <div class="form-row wide">
                <label class="pilot-label">
                    Additional Description
                    @if (obstacleType.ToLower() == "other") {
                        <span style="color: red;">*</span>
                    }
                </label>
                @if (obstacleType.ToLower() == "other") {
                    <textarea asp-for="ObstacleDescription" rows="4" class="pilot-textarea" 
                              placeholder="Additional details, hazards, or important notes..." required></textarea>
                } else {
                    <textarea asp-for="ObstacleDescription" rows="4" class="pilot-textarea" 
                              placeholder="Additional details, hazards, or important notes..."></textarea>
                }
                <span class="pilot-help">
                    @if (obstacleType.ToLower() == "other") {
                        <text>Description is required for Other obstacle types</text>
                    } else {
                        <text>Any additional information that might be relevant for aviation safety</text>
                    }
                </span>
                <span asp-validation-for="ObstacleDescription" class="pilot-validation"></span>
            </div>
        </div>

        <div class="pilot-actions">
    <a href="/Crew" class="pilot-secondary" style="text-decoration: none; display: inline-block; text-align: center;">Cancel</a>
    <a href="/Obstacle/AllObstacles" class="pilot-secondary" style="text-decoration: none; display: inline-block; text-align: center;">Draft</a>
    <button type="submit" class="pilot-primary">Register obstacle</button>
</div>

    </form>
</section>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Height conversion functionality
            const unitBtns = document.querySelectorAll('.unit-btn');
            const heightInput = document.getElementById('heightInput');
            const conversionDisplay = document.getElementById('conversionDisplay');
            const heightUnitField = document.getElementById('heightUnit');
            const unitLabel = document.getElementById('unitLabel');
            const hiddenHeight = document.getElementById('hiddenHeight');
            
            let currentUnit = 'meters';
            
            // Unit button switching
            unitBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const unit = this.getAttribute('data-unit');
                    switchUnit(unit);
                });
            });
            
            function switchUnit(unit) {
                currentUnit = unit;
                heightUnitField.value = unit;
                
                // Update button styles
                unitBtns.forEach(btn => {
                    const isActive = btn.getAttribute('data-unit') === unit;
                    btn.style.borderColor = isActive ? '#4f46e5' : '#d1d5db';
                    btn.style.backgroundColor = isActive ? '#4f46e5' : '#f9fafb';
                    btn.style.color = isActive ? 'white' : '#374151';
                });
                
                // Update unit label
                unitLabel.textContent = unit === 'meters' ? 'm' : 'ft';
                
                // Clear input and update conversion
                heightInput.value = '';
                updateConversion();
            }
            
            function updateConversion() {
                const inputValue = parseFloat(heightInput.value);
                let displayValue = '';
                let heightInMeters = 0;
                
                if (!isNaN(inputValue) && inputValue > 0) {
                    if (currentUnit === 'meters') {
                        const feet = (inputValue * 3.28084).toFixed(1);
                        displayValue = `â‰ˆ ${feet} ft`;
                        heightInMeters = inputValue;
                    } else {
                        const meters = (inputValue * 0.3048).toFixed(1);
                        displayValue = `â‰ˆ ${meters} m`;
                        heightInMeters = inputValue * 0.3048;
                    }
                    
                    // Update hidden field for model binding
                    hiddenHeight.value = heightInMeters;
                } else {
                    displayValue = currentUnit === 'meters' ? 'â‰ˆ 0.0 ft' : 'â‰ˆ 0.0 m';
                    hiddenHeight.value = '';
                }
                
                conversionDisplay.textContent = displayValue;
            }
            
            // Live conversion updates
            if (heightInput) {
                heightInput.addEventListener('input', updateConversion);
            }
            
            // Form submission - ensure height is set
            const form = document.querySelector('form');
            form.addEventListener('submit', function(e) {
                updateConversion(); // Ensure conversion is current
            });
        });

        // Keep your existing coordinates display script unchanged
        document.addEventListener('DOMContentLoaded', function() {
            const coordinatesJson = '@Html.Raw(coordinatesJson)';
            const coordinatesDisplay = document.getElementById('coordinates-display');
            
            if (coordinatesJson && coordinatesJson !== '[]') {
                try {
                    const coordinates = JSON.parse(coordinatesJson);
                    let html = '';
                    
                    coordinates.forEach((coord, index) => {
                        html += `<div class="coordinate-item">
                                   Point ${index + 1}: ${coord.lat.toFixed(6)}, ${coord.lng.toFixed(6)}
                                 </div>`;
                    });
                    
                    coordinatesDisplay.innerHTML = html;
                } catch (e) {
                    coordinatesDisplay.innerHTML = '<div class="coordinate-item">Error parsing coordinates</div>';
                }
            }
        });
    </script>
}
