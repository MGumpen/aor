@model AOR.Models.ObstacleData

@{
    ViewData["Title"] = "Registration Complete";
    Layout = "_Layout";
}

<style>
    .container {
        max-width: 800px;
        margin: 0 auto;
        background: #ffffff;
        border-radius: 24px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.08);
        padding: 24px;
        border: 1px solid #e5e7eb;
    }
    
    .success-header {
        text-align: center;
        margin-bottom: 32px;
        padding-bottom: 20px;
        border-bottom: 2px solid #10b981;
    }
    
    .success-icon {
        font-size: 3rem;
        color: #10b981;
        margin-bottom: 10px;
    }
    
    .obstacle-type-badge {
        display: inline-block;
        padding: 6px 16px;
        border-radius: 20px;
        font-size: 14px;
        font-weight: 600;
        text-transform: uppercase;
        margin: 0 auto 16px;
    }
    
    .badge-powerline { background: #fee2e2; color: #dc2626; }
    .badge-mast { background: #dbeafe; color: #2563eb; }
    .badge-other { background: #d1fae5; color: #059669; }
    
    .details-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 24px;
    }
    
    .detail-card {
        background: #f8fafc;
        border: 1px solid #e2e8f0;
        border-radius: 12px;
        padding: 16px;
    }
    
    .detail-label {
        font-size: 0.875rem;
        font-weight: 600;
        color: #64748b;
        margin-bottom: 4px;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }
    
    .detail-value {
        font-size: 1rem;
        color: #1e293b;
        word-break: break-word;
    }
    
    .coordinates-section {
        background: #f0f9ff;
        border: 1px solid #0ea5e9;
        border-radius: 12px;
        padding: 16px;
        margin-bottom: 24px;
    }
    
    .coordinates-list {
        background: white;
        border-radius: 8px;
        padding: 12px;
        font-family: 'Courier New', monospace;
        font-size: 12px;
        max-height: 200px;
        overflow-y: auto;
    }
    
    .coordinate-item {
        padding: 6px 10px;
        margin-bottom: 4px;
        background: #f8fafc;
        border-radius: 6px;
        border-left: 3px solid #3b82f6;
    }
    
    .actions {
        display: flex;
        gap: 12px;
        justify-content: center;
        flex-wrap: wrap;
    }
    
    .btn {
        padding: 12px 24px;
        border-radius: 8px;
        text-decoration: none;
        font-weight: 500;
        text-align: center;
        transition: all 0.2s ease;
        display: inline-block;
    }
    
    .btn-primary {
        background: #4f46e5;
        color: white;
        border: 2px solid #4f46e5;
    }
    
    .btn-primary:hover {
        background: #4338ca;
        border-color: #4338ca;
        color: white;
    }
    
    .btn-secondary {
        background: white;
        color: #4f46e5;
        border: 2px solid #4f46e5;
    }
    
    .btn-secondary:hover {
        background: #4f46e5;
        color: white;
    }
</style>

<section class="container">
    <!-- Success Header -->
    <div class="success-header">
        <div class="success-icon">âœ…</div>
        <h1>Registration Complete!</h1>
        <div class="obstacle-type-badge badge-@Model.ObstacleType.ToLower()">
            @Model.ObstacleType.ToUpper()
        </div>
        <p class="text-gray-600">Your @Model.ObstacleType.ToLower() obstacle has been successfully registered</p>
    </div>

    <!-- Obstacle Details -->
    <div class="details-grid">
        <div class="detail-card">
            <div class="detail-label">Name</div>
            <div class="detail-value">@Model.ObstacleName</div>
        </div>
        
        <div class="detail-card">
            <div class="detail-label">Type</div>
            <div class="detail-value">@Model.ObstacleType.ToUpper()</div>
        </div>
        
        @if (Model.ObstacleHeight.HasValue)
        {
            <div class="detail-card">
                <div class="detail-label">Height</div>
                <div class="detail-value">@Model.ObstacleHeight.Value m</div>
            </div>
        }
        
        <div class="detail-card">
            <div class="detail-label">Points</div>
            <div class="detail-value">@Model.PointCount coordinate(s)</div>
        </div>
        
        <div class="detail-card">
            <div class="detail-label">Registered</div>
            <div class="detail-value">@Model.CreatedAt.ToString("dd.MM.yyyy HH:mm")</div>
        </div>
        
        <!-- Type-specific fields -->
        @if (Model.ObstacleType.ToLower() == "powerline")
        {
            @if (Model.Voltage.HasValue)
            {
                <div class="detail-card">
                    <div class="detail-label">Voltage</div>
                    <div class="detail-value">@Model.Voltage kV</div>
                </div>
            }
            @if (Model.WireCount.HasValue)
            {
                <div class="detail-card">
                    <div class="detail-label">Wire Count</div>
                    <div class="detail-value">@Model.WireCount wires</div>
                </div>
            }
        }
        else if (Model.ObstacleType.ToLower() == "mast")
        {
            @if (!string.IsNullOrEmpty(Model.MastType))
            {
                <div class="detail-card">
                    <div class="detail-label">Mast Type</div>
                    <div class="detail-value">@Model.MastType</div>
                </div>
            }
            @if (Model.HasLighting.HasValue)
            {
                <div class="detail-card">
                    <div class="detail-label">Aviation Lighting</div>
                    <div class="detail-value">@(Model.HasLighting.Value ? "Yes" : "No")</div>
                </div>
            }
        }
        else
        {
            @if (!string.IsNullOrEmpty(Model.Category))
            {
                <div class="detail-card">
                    <div class="detail-label">Category</div>
                    <div class="detail-value">@Model.Category</div>
                </div>
            }
            @if (!string.IsNullOrEmpty(Model.Material))
            {
                <div class="detail-card">
                    <div class="detail-label">Material</div>
                    <div class="detail-value">@Model.Material</div>
                </div>
            }
        }
    </div>
    
    <!-- Description -->
    @if (!string.IsNullOrEmpty(Model.ObstacleDescription))
    {
        <div class="detail-card" style="margin-bottom: 24px;">
            <div class="detail-label">Description</div>
            <div class="detail-value">@Model.ObstacleDescription</div>
        </div>
    }
    
    <!-- Coordinates -->
    @if (!string.IsNullOrEmpty(Model.Coordinates) && Model.Coordinates != "[]")
    {
        <div class="coordinates-section">
            <h3 style="margin: 0 0 12px 0; color: #0c4a6e;">GPS Coordinates</h3>
            <div class="coordinates-list" id="coordinates-display"></div>
        </div>
    }
    
    <!-- Actions -->
    <div class="actions">
        <a href="/Crew" class="btn btn-primary">Back to Map</a>
        <a href="/Obstacle/AllObstacles" class="btn btn-secondary">View All Obstacles</a>
    </div>
</section>

@section Scripts {
    <script>
        // Display coordinates
        document.addEventListener('DOMContentLoaded', function() {
            const coordinatesJson = '@Html.Raw(Model.Coordinates ?? "[]")';
            const coordinatesDisplay = document.getElementById('coordinates-display');
            
            if (coordinatesJson && coordinatesJson !== '[]' && coordinatesDisplay) {
                try {
                    const coordinates = JSON.parse(coordinatesJson);
                    let html = '';
                    
                    coordinates.forEach((coord, index) => {
                        html += `<div class="coordinate-item">
                                   Point ${index + 1}: ${coord.lat.toFixed(6)}, ${coord.lng.toFixed(6)}
                                 </div>`;
                    });
                    
                    coordinatesDisplay.innerHTML = html;
                } catch (e) {
                    coordinatesDisplay.innerHTML = '<div class="coordinate-item">Error parsing coordinates</div>';
                }
            }
        });
    </script>
}
