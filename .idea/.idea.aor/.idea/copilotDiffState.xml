<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/AOR/Data/AorDbSeeder.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/AOR/Data/AorDbSeeder.cs" />
              <option name="originalContent" value="namespace AOR.Data;&#10;&#10;public class AorDbSeeder&#10;{&#10;    &#10;}" />
              <option name="updatedContent" value="using System;&#10;using System.Linq;&#10;using System.Threading.Tasks;&#10;using Microsoft.AspNetCore.Identity;&#10;using Microsoft.Extensions.DependencyInjection;&#10;using Microsoft.Extensions.Logging;&#10;&#10;namespace AOR.Data;&#10;&#10;public static class AorDbSeeder&#10;{&#10;    /// &lt;summary&gt;&#10;    /// Seed roles and test users into the Identity store.&#10;    /// Call this during application startup after DbContext has been registered.&#10;    /// &lt;/summary&gt;&#10;    public static async Task SeedAsync(IServiceProvider serviceProvider, ILogger logger)&#10;    {&#10;        using var scope = serviceProvider.CreateScope();&#10;        var scoped = scope.ServiceProvider;&#10;&#10;        // Try to log DB provider if available&#10;        try&#10;        {&#10;            var db = scoped.GetService&lt;AorDbContext&gt;();&#10;            if (db != null)&#10;            {&#10;                logger.LogInformation(&quot;Database provider: {Provider}&quot;, db.Database.ProviderName ?? &quot;(unknown)&quot;);&#10;            }&#10;        }&#10;        catch { /* ignore logging errors */ }&#10;&#10;        RoleManager&lt;IdentityRole&gt; roleManager;&#10;        UserManager&lt;User&gt; userManager;&#10;        try&#10;        {&#10;            roleManager = scoped.GetRequiredService&lt;RoleManager&lt;IdentityRole&gt;&gt;();&#10;            userManager = scoped.GetRequiredService&lt;UserManager&lt;User&gt;&gt;();&#10;        }&#10;        catch (Exception ex)&#10;        {&#10;            logger.LogWarning(ex, &quot;RoleManager or UserManager not available; skipping identity seeding.&quot;);&#10;            return;&#10;        }&#10;&#10;        // Roles to ensure&#10;        var roles = new[] { &quot;Crew&quot;, &quot;Admin&quot;, &quot;Registrar&quot; };&#10;        foreach (var role in roles)&#10;        {&#10;            if (!await roleManager.RoleExistsAsync(role))&#10;            {&#10;                var createResult = await roleManager.CreateAsync(new IdentityRole(role));&#10;                if (createResult.Succeeded)&#10;                {&#10;                    logger.LogInformation(&quot;Created role '{Role}'&quot;, role);&#10;                }&#10;                else&#10;                {&#10;                    logger.LogWarning(&quot;Failed to create role '{Role}': {Errors}&quot;, role, string.Join(&quot;; &quot;, createResult.Errors.Select(e =&gt; e.Description)));&#10;                }&#10;            }&#10;            else&#10;            {&#10;                logger.LogInformation(&quot;Role '{Role}' already exists&quot;, role);&#10;            }&#10;        }&#10;&#10;        // Test users&#10;        var testUsers = new[]&#10;        {&#10;            new { Email = &quot;crew@test.local&quot;, Password = &quot;Test123$&quot;, Role = &quot;Crew&quot;, FirstName = &quot;Crew&quot;, LastName = &quot;User&quot; },&#10;            new { Email = &quot;admin@test.local&quot;, Password = &quot;Test123$&quot;, Role = &quot;Admin&quot;, FirstName = &quot;Admin&quot;, LastName = &quot;User&quot; },&#10;            new { Email = &quot;registrar@test.local&quot;, Password = &quot;Test123$&quot;, Role = &quot;Registrar&quot;, FirstName = &quot;Registrar&quot;, LastName = &quot;User&quot; }&#10;        };&#10;&#10;        foreach (var tu in testUsers)&#10;        {&#10;            try&#10;            {&#10;                var existing = await userManager.FindByEmailAsync(tu.Email);&#10;                if (existing == null)&#10;                {&#10;                    var user = new User&#10;                    {&#10;                        UserName = tu.Email,&#10;                        Email = tu.Email,&#10;                        EmailConfirmed = true,&#10;                        FirstName = tu.FirstName,&#10;                        LastName = tu.LastName&#10;                    };&#10;&#10;                    var createRes = await userManager.CreateAsync(user, tu.Password);&#10;                    if (!createRes.Succeeded)&#10;                    {&#10;                        logger.LogWarning(&quot;Failed to create user {Email}: {Errors}&quot;, tu.Email, string.Join(&quot;; &quot;, createRes.Errors.Select(e =&gt; e.Description)));&#10;                        continue;&#10;                    }&#10;&#10;                    var addRoleRes = await userManager.AddToRoleAsync(user, tu.Role);&#10;                    if (!addRoleRes.Succeeded)&#10;                    {&#10;                        logger.LogWarning(&quot;Failed to add role {Role} to user {Email}: {Errors}&quot;, tu.Role, tu.Email, string.Join(&quot;; &quot;, addRoleRes.Errors.Select(e =&gt; e.Description)));&#10;                    }&#10;                    else&#10;                    {&#10;                        logger.LogInformation(&quot;Created user {Email} with role {Role}&quot;, tu.Email, tu.Role);&#10;                    }&#10;                }&#10;                else&#10;                {&#10;                    // Ensure role is assigned&#10;                    var rolesForUser = await userManager.GetRolesAsync(existing);&#10;                    if (!rolesForUser.Contains(tu.Role))&#10;                    {&#10;                        var addRoleRes = await userManager.AddToRoleAsync(existing, tu.Role);&#10;                        if (!addRoleRes.Succeeded)&#10;                        {&#10;                            logger.LogWarning(&quot;Failed to add missing role {Role} to existing user {Email}: {Errors}&quot;, tu.Role, tu.Email, string.Join(&quot;; &quot;, addRoleRes.Errors.Select(e =&gt; e.Description)));&#10;                        }&#10;                        else&#10;                        {&#10;                            logger.LogInformation(&quot;Added missing role {Role} to existing user {Email}&quot;, tu.Role, tu.Email);&#10;                        }&#10;                    }&#10;                    else&#10;                    {&#10;                        logger.LogInformation(&quot;User {Email} already exists and has role {Role}&quot;, tu.Email, tu.Role);&#10;                    }&#10;                }&#10;            }&#10;            catch (Exception ex)&#10;            {&#10;                logger.LogError(ex, &quot;Exception while seeding user {Email}&quot;, tu.Email);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/AOR/wwwroot/css/Crew.Index.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/AOR/wwwroot/css/Crew.Index.css" />
              <option name="updatedContent" value="/* Crew Index spesifikk styling */&#10;&#10;// ...eksisterende CSS fra Index.cshtml.css...&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>